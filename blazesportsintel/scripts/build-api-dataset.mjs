#!/usr/bin/env node
import fs from "node:fs";
import path from "node:path";
import { fileURLToPath } from "node:url";

const scriptDir = path.dirname(fileURLToPath(import.meta.url));
const repoRoot = path.resolve(scriptDir, "..");
const DATA_ROOT = path.join(repoRoot, "data");
const OUTPUT_PATH = path.join(repoRoot, "apps/api/src/generated/dataset.ts");

function readJsonl(filePath) {
  if (!fs.existsSync(filePath)) return [];
  return fs
    .readFileSync(filePath, "utf8")
    .split(/\r?\n/)
    .filter((line) => line.trim().length > 0)
    .map((line) => JSON.parse(line));
}

function readMetadata(league, season) {
  const metadataPath = path.join(DATA_ROOT, league, season, "metadata.json");
  if (!fs.existsSync(metadataPath)) {
    return { league, season: Number.parseInt(season, 10), asOf: new Date().toISOString() };
  }
  return JSON.parse(fs.readFileSync(metadataPath, "utf8"));
}

function buildDataset() {
  if (!fs.existsSync(DATA_ROOT)) {
    throw new Error(`Data directory not found: ${DATA_ROOT}`);
  }

  const dataset = {};
  const leagues = fs
    .readdirSync(DATA_ROOT)
    .filter((entry) => fs.statSync(path.join(DATA_ROOT, entry)).isDirectory())
    .sort();

  for (const league of leagues) {
    const leagueDir = path.join(DATA_ROOT, league);
    const seasons = fs
      .readdirSync(leagueDir)
      .filter((entry) => fs.statSync(path.join(leagueDir, entry)).isDirectory())
      .sort();

    dataset[league] = {};
    for (const season of seasons) {
      const baseDir = path.join(leagueDir, season);
      dataset[league][season] = {
        metadata: readMetadata(league, season),
        teams: readJsonl(path.join(baseDir, "teams.jsonl")),
        players: readJsonl(path.join(baseDir, "players.jsonl")),
        staff: readJsonl(path.join(baseDir, "staff.jsonl")),
        schedules: readJsonl(path.join(baseDir, "schedules.jsonl")),
        standings: readJsonl(path.join(baseDir, "standings.jsonl"))
      };
    }
  }

  return dataset;
}

function writeDatasetFile(dataset) {
  const header = "// This file is auto-generated by scripts/build-api-dataset.mjs\n";
  const body = `export const dataset = ${JSON.stringify(dataset, null, 2)} as const;\n`;
  const footer = "export type Dataset = typeof dataset;\n";
  fs.mkdirSync(path.dirname(OUTPUT_PATH), { recursive: true });
  fs.writeFileSync(OUTPUT_PATH, header + body + footer);
}

const dataset = buildDataset();
writeDatasetFile(dataset);
console.log(`Wrote dataset with ${Object.keys(dataset).length} leagues to ${OUTPUT_PATH}`);
